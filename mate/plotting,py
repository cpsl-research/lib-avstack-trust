import os
import numpy as np

from scipy.stats import beta
import matplotlib.pyplot as plt
from labellines import labelLine

from avstack.modules.assignment import build_A_from_distance, gnn_single_frame_assign


marker_large = 10
marker_medium = 8
marker_small = 5
linewidth = 3
agent_colors = "rgbokmc"


def _add_agents_fovs(ax, agents, fovs):
    for agent, fov, color in zip(agents, fovs, agent_colors):
        ax.plot(*agent, '*', markersize=marker_medium, color=color)
        try:
            # for FOV as a shape
            circle = plt.Circle(agent, fov.radius, color=color, alpha=0.4)
            ax.add_patch(circle)
        except AttributeError:
            # for FOV as a hull
            ax.plot(-1 * fov[:, 1], fov[:, 0], color=color)


def plot_agents(agents, fovs, save=False, fig_dir="figures"):
    fig, ax = plt.subplots()
    _add_agents_fovs(ax, agents, fovs)
    ax.set_aspect('equal', adjustable='box')
    plt.legend()
    plt.axis('off')
    plt.tight_layout()
    if save:
        plt.savefig(os.path.join(fig_dir, "agents.pdf"))
    plt.show()


def plot_agents_objects(agents, fovs, objects, fps, fns, save=False, fig_dir="figures"):
    fig, ax = plt.subplots()

    # plot agents
    _add_agents_fovs(ax, agents, fovs)
    
    # plot objects
    for i, object in enumerate(objects):
        ax.plot(*object, 'o', markersize=marker_medium, color="black", label="Truth" if i==0 else "")
    
    # plot false positives
    for i, fp in enumerate(fps):
        ax.plot(*fp[1], 'x', markersize=marker_medium, color=agent_colors[fp[0]], label="FP" if i == 0 else "")
    
    # plot false negatives
    for i, fn in enumerate(fns):
        ax.plot(*objects[fn[1]], '+', markersize=marker_large, color=agent_colors[fn[0]], label="FN" if i == 0 else "")
    
    # set limits
    ax.set_xlim([-1, 2])
    ax.set_ylim([-1, 2])
    ax.set_aspect('equal', adjustable='box')
    plt.legend()
    plt.axis('off')
    plt.tight_layout()
    if save:
        plt.savefig(os.path.join(fig_dir, "experiment_truth.pdf"))
    plt.show()
    

def plot_detections(agents, fovs, dets, objects=None, save=False, fig_dir="figures"):
    # -- plot detections only
    fig, ax = plt.subplots()

    # plot agents
    _add_agents_fovs(ax, agents, fovs)
    
    # plot objects
    if objects:
        for i, object in enumerate(objects):
            ax.plot(*object, 'o', markersize=marker_medium, color="black", label="Truth" if i==0 else "")
    
    # plot detections
    det_markers = "123"
    for i_agent, ds in dets.items():
        for j, det in enumerate(ds):
            ax.plot(*det.x, det_markers[i_agent], markersize=marker_large+4, alpha=1, color=agent_colors[i_agent],
                    label="Detection" if j==0 else "")
    
    # set limits
    ax.set_xlim([-1, 2])
    ax.set_ylim([-1, 2])
    ax.set_aspect('equal', adjustable='box')
    plt.legend()
    plt.axis('off')
    plt.tight_layout()
    if save:
        plt.savefig(os.path.join(fig_dir, "experiment_detections.pdf"))
    plt.show()


def plot_clusters(agents, fovs, clusters, objects=None, save=False, fig_dir="figures"):
    # plot clusters
    fig, ax = plt.subplots()

    # plot agents
    _add_agents_fovs(ax, agents, fovs)
    
    # plot objects
    if objects:
        for i, object in enumerate(objects):
            ax.plot(*object, 'o', markersize=marker_large, color="black", label="Truth" if i==0 else "")
    
    # plot clusters
    for j, clust in enumerate(clusters):
        pos = clust.centroid().x
        ax.plot(*pos, "x", markersize=marker_large, color="orange", label="Cluster" if j==0 else "", alpha=0.8)
        ax.text(pos[0]+0.02, pos[1]+0.02, j)
    
    # set limits
    ax.set_xlim([-1, 2])
    ax.set_ylim([-1, 2])
    ax.set_aspect('equal', adjustable='box')
    plt.legend()
    plt.axis('off')
    plt.tight_layout()
    if save:
        plt.savefig(os.path.join(fig_dir, "experiment_clusters.pdf"))
    plt.show()


def plot_tracks(agents, fovs, tracks, objects=None, save=False, fig_dir="figures"):
    # plot tracks
    fig, ax = plt.subplots()

    # plot agents
    _add_agents_fovs(ax, agents, fovs)
    
    # plot objects
    if objects:
        for i, object in enumerate(objects):
            ax.plot(*object, 'o', markersize=marker_large, color="black", label="Truth" if i==0 else "")
    
    # plot tracks
    for j, track in enumerate(tracks):
        pos = track.position.x
        ax.plot(*pos, "x", markersize=marker_large, color="orange", label="Track" if j==0 else "", alpha=0.8)
        ax.text(pos[0]+0.02, pos[1]+0.02, j)
    
    # set limits
    ax.set_xlim([-1, 2])
    ax.set_ylim([-1, 2])
    ax.set_aspect('equal', adjustable='box')
    plt.legend()
    plt.axis('off')
    plt.tight_layout()
    if save:
        plt.savefig(os.path.join(fig_dir, "experiment_tracks.pdf"))
    plt.show()

def plot_trust(trust_estimator, objects=None, use_labellines=False, save=False, fig_dir="figures"):
    # assign last tracks to truths, if possible
    if objects is not None:
        A = build_A_from_distance(trust_estimator.tracks, objects)
        assigns = gnn_single_frame_assign(A, cost_threshold=0.1)
    else:
        assigns = None

    # plot all track trust distributions
    fig, ax = plt.subplots(figsize=(5,4))
    x = np.linspace(0, 1.0, 10000)
    IDs = np.array([trk.ID for trk in trust_estimator.tracks])
    for ID in sorted(trust_estimator.track_trust):
        idx_track = np.argwhere(ID == IDs)[0][0]
        if assigns is not None:
            label = f"{idx_track}: True Object" if assigns.has_assign(row=idx_track) \
                else f"{idx_track}: False Pos."
        else:
            label=f"Track {ID}"
        linestyle = "-" if "True" in label else "--"
        y = beta.pdf(x, trust_estimator.track_trust[ID].alpha, trust_estimator.track_trust[ID].beta)
        ax.plot(x, y, linewidth=linewidth, linestyle=linestyle, label=label)

    if use_labellines:
        lines = ax.get_lines()
        xs = np.linspace(0.3, 0.7, len(lines))
        for i, line in enumerate(lines):
            labelLine(
                line,
                xs[i],
                label=r"{}".format(line.get_label().split(":")[0]),
                ha="left",
                va="bottom",
                align=False,
                backgroundcolor="none",
            )

    ax.set_xlim([0, 1.0])
    ax.set_ylim([0, 10])
    ax.legend(loc="upper right")
    ax.set_xlabel("Track Trust Score")
    ax.set_ylabel("PDF")
    ax.set_yticklabels([])
    plt.tight_layout()
    if save:
        plt.savefig(os.path.join(fig_dir, "experiment_track_trusts.pdf"))
    plt.show()

    # plot all agent trust distributions
    cs = "rgb"
    fig, ax = plt.subplots(figsize=(5,4))
    x = np.linspace(0, 1.0, 10000)
    for ID, color in zip(trust_estimator.agent_trust, cs):
        # y = np.diff(trust_estimator.agent_trust[ID])
        # x = np.linspace(0, 1.0, len(y))
        # dx = x[1] - x[0]
        # y /= sum(y)*dx
        y = beta.pdf(x, trust_estimator.agent_trust[ID].alpha, trust_estimator.agent_trust[ID].beta)
        ax.plot(x, y, color=color, linewidth=linewidth, linestyle=linestyle, label=f"Agent {ID}")

    ax.set_xlim([0, 1.0])
    ax.set_ylim([0, 10])
    ax.legend(loc="upper right")
    ax.set_xlabel("Agent Trust Score")
    ax.set_ylabel("PDF")
    ax.set_yticklabels([])
    plt.tight_layout()
    if save:
        plt.savefig(os.path.join(fig_dir, "experiment_agent_trusts.pdf"))
    plt.show()


def plot_metrics(df, save=False, fig_dir="figures"):
    # aggregate and normalize by number of occurrences
    df_agg = df.groupby('n_observers')[list(range(7))].sum().T.astype(float)
    df_agg[1:4] /= df_agg[1:4].sum().astype(float)
    df_agg[4:7] /= df_agg[4:7].sum().astype(float)
    
    # plot cases 1 - 6
    ax = df_agg[1:].plot.bar(figsize=(6, 3))
    xticklabels = [
        "TT\nTrusted",
        "TT\nUnknown",
        "TT\nDistrusted",
        "FT\nTrusted",
        "FT\nUnknown",
        "FT\nDistrusted",
    ]
    ax.set_xticklabels(xticklabels)
    ax.tick_params(axis='x', labelrotation=0)
    ax.legend(["1 Observer", "2 Observers", "3 Observers"], loc="lower right")
    ax.tick_params(axis='x', which='major', labelsize=11)
    ax.axvline(x=2.5, color="k", linestyle="--", linewidth=linewidth, label="")

    # plt.xlabel('Case Index')
    plt.ylabel("Fraction of Cases")
    plt.tight_layout()
    if save:
        plt.savefig(os.path.join(fig_dir, "experiment_metrics.pdf"))
    plt.show()